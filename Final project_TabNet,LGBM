{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Final project_TabNet,LGBM","provenance":[{"file_id":"1ozJeDIhWUHV3p5irXKb0WS_ChZA-woi2","timestamp":1621910456819}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"efe1ce34830e4b52a42003aa0a44ad43":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e7d97efa5eb649f48029595825194d4c","IPY_MODEL_3ed9d452d4af4d428a031fae20ec3944"],"layout":"IPY_MODEL_7a50465fbb5348229b2e66fc5da518be"}},"e7d97efa5eb649f48029595825194d4c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"100%","description_tooltip":null,"layout":"IPY_MODEL_a2e6897cf11f4c5aabfac81eb0d72b88","max":16,"min":0,"orientation":"horizontal","style":"IPY_MODEL_4595128a4a2e4397ad4d4a7341eab696","value":16}},"3ed9d452d4af4d428a031fae20ec3944":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_019ae8467a574e9f82c825ee477fe99c","placeholder":"​","style":"IPY_MODEL_6fde6a6857a04bb8a7bd464d83bca335","value":" 16/16 [00:21&lt;00:00,  1.34s/it]"}},"7a50465fbb5348229b2e66fc5da518be":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a2e6897cf11f4c5aabfac81eb0d72b88":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4595128a4a2e4397ad4d4a7341eab696":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":"initial"}},"019ae8467a574e9f82c825ee477fe99c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6fde6a6857a04bb8a7bd464d83bca335":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"mhbCM4XdWUwB"},"source":["# 기본 설정 "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Kmmyh73F9gh","executionInfo":{"elapsed":31401,"status":"ok","timestamp":1623351757907,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"61b73cdf-07c9-47ef-df77-9bb931511edd"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JrmvGzsbf4Bw"},"source":["#동시출력 가능코드\n","from IPython.core.interactiveshell import InteractiveShell\n","InteractiveShell.ast_node_interactivity=\"all\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ysI2lkv-Dj0T"},"source":["import pandas as pd\n","import numpy as np\n","np.random.seed(0)\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import os\n","import re\n","\n","from IPython.core.interactiveshell import InteractiveShell\n","InteractiveShell.ast_node_interactivity = \"all\"\n","\n","from sklearn.linear_model import LinearRegression\n","from sklearn.linear_model import Lasso\n","from sklearn.linear_model import Ridge\n","from sklearn.linear_model import ElasticNet\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.ensemble import AdaBoostRegressor\n","from sklearn.ensemble import BaggingRegressor\n","from sklearn.model_selection import StratifiedKFold\n","\n","from sklearn import preprocessing\n","from sklearn.preprocessing import MinMaxScaler, StandardScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import RandomizedSearchCV \n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import mean_squared_error\n","from sklearn.utils import shuffle\n","from scipy.special import erfc\n","from sklearn.dummy import DummyRegressor\n","from sklearn.svm import SVR\n","\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import cross_val_score\n","\n","from sklearn.model_selection import train_test_split, cross_validate, RandomizedSearchCV\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, mean_squared_error, r2_score\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, RandomForestRegressor, VotingRegressor\n","\n","from lightgbm import LGBMRegressor\n","from lightgbm import LGBMClassifier\n","\n","import xgboost as xgb\n","from xgboost import XGBClassifier, XGBRegressor\n","\n","import warnings\n","\n","\n","from pytorch_tabnet.multitask import TabNetMultiTaskClassifier\n","\n","import torch\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import roc_auc_score, log_loss\n","\n","from tqdm.notebook import tqdm\n","\n","import torch.nn as nn\n","import torchvision.datasets as dsets"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hOzI38CiXcbu"},"source":["# 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"WucZOJCvETyC"},"source":["train=pd.read_csv('/content/drive/MyDrive/신용카드 사용자 예측/train.csv')\n","test=pd.read_csv('/content/drive/MyDrive/신용카드 사용자 예측/test.csv')\n","submission = pd.read_csv('/content/drive/MyDrive/신용카드 사용자 예측/sample_submission.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":732},"id":"hjYcAPMPaZkJ","executionInfo":{"elapsed":361,"status":"ok","timestamp":1622802636403,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"f58ca8c4-2bbf-40e2-ecfd-38eeefeb91e4"},"source":["train.head()\n","test.head() #no \"credit\""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>gender</th>\n","      <th>car</th>\n","      <th>reality</th>\n","      <th>child_num</th>\n","      <th>income_total</th>\n","      <th>income_type</th>\n","      <th>edu_type</th>\n","      <th>family_type</th>\n","      <th>house_type</th>\n","      <th>DAYS_BIRTH</th>\n","      <th>DAYS_EMPLOYED</th>\n","      <th>FLAG_MOBIL</th>\n","      <th>work_phone</th>\n","      <th>phone</th>\n","      <th>email</th>\n","      <th>occyp_type</th>\n","      <th>family_size</th>\n","      <th>begin_month</th>\n","      <th>credit</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0</td>\n","      <td>202500.0</td>\n","      <td>Commercial associate</td>\n","      <td>Higher education</td>\n","      <td>Married</td>\n","      <td>Municipal apartment</td>\n","      <td>-13899</td>\n","      <td>-4709</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>2.0</td>\n","      <td>-6.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>1</td>\n","      <td>247500.0</td>\n","      <td>Commercial associate</td>\n","      <td>Secondary / secondary special</td>\n","      <td>Civil marriage</td>\n","      <td>House / apartment</td>\n","      <td>-11380</td>\n","      <td>-1540</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Laborers</td>\n","      <td>3.0</td>\n","      <td>-5.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>450000.0</td>\n","      <td>Working</td>\n","      <td>Higher education</td>\n","      <td>Married</td>\n","      <td>House / apartment</td>\n","      <td>-19087</td>\n","      <td>-4434</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Managers</td>\n","      <td>2.0</td>\n","      <td>-22.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>202500.0</td>\n","      <td>Commercial associate</td>\n","      <td>Secondary / secondary special</td>\n","      <td>Married</td>\n","      <td>House / apartment</td>\n","      <td>-15088</td>\n","      <td>-2092</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Sales staff</td>\n","      <td>2.0</td>\n","      <td>-37.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>F</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>157500.0</td>\n","      <td>State servant</td>\n","      <td>Higher education</td>\n","      <td>Married</td>\n","      <td>House / apartment</td>\n","      <td>-15037</td>\n","      <td>-2105</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Managers</td>\n","      <td>2.0</td>\n","      <td>-26.0</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   index gender car reality  child_num  income_total           income_type  \\\n","0      0      F   N       N          0      202500.0  Commercial associate   \n","1      1      F   N       Y          1      247500.0  Commercial associate   \n","2      2      M   Y       Y          0      450000.0               Working   \n","3      3      F   N       Y          0      202500.0  Commercial associate   \n","4      4      F   Y       Y          0      157500.0         State servant   \n","\n","                        edu_type     family_type           house_type  \\\n","0               Higher education         Married  Municipal apartment   \n","1  Secondary / secondary special  Civil marriage    House / apartment   \n","2               Higher education         Married    House / apartment   \n","3  Secondary / secondary special         Married    House / apartment   \n","4               Higher education         Married    House / apartment   \n","\n","   DAYS_BIRTH  DAYS_EMPLOYED  FLAG_MOBIL  work_phone  phone  email  \\\n","0      -13899          -4709           1           0      0      0   \n","1      -11380          -1540           1           0      0      1   \n","2      -19087          -4434           1           0      1      0   \n","3      -15088          -2092           1           0      1      0   \n","4      -15037          -2105           1           0      0      0   \n","\n","    occyp_type  family_size  begin_month  credit  \n","0          NaN          2.0         -6.0     1.0  \n","1     Laborers          3.0         -5.0     1.0  \n","2     Managers          2.0        -22.0     2.0  \n","3  Sales staff          2.0        -37.0     0.0  \n","4     Managers          2.0        -26.0     2.0  "]},"metadata":{"tags":[]},"execution_count":126},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>gender</th>\n","      <th>car</th>\n","      <th>reality</th>\n","      <th>child_num</th>\n","      <th>income_total</th>\n","      <th>income_type</th>\n","      <th>edu_type</th>\n","      <th>family_type</th>\n","      <th>house_type</th>\n","      <th>DAYS_BIRTH</th>\n","      <th>DAYS_EMPLOYED</th>\n","      <th>FLAG_MOBIL</th>\n","      <th>work_phone</th>\n","      <th>phone</th>\n","      <th>email</th>\n","      <th>occyp_type</th>\n","      <th>family_size</th>\n","      <th>begin_month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>26457</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>0</td>\n","      <td>112500.0</td>\n","      <td>Pensioner</td>\n","      <td>Secondary / secondary special</td>\n","      <td>Civil marriage</td>\n","      <td>House / apartment</td>\n","      <td>-21990</td>\n","      <td>365243</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>2.0</td>\n","      <td>-60.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>26458</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>135000.0</td>\n","      <td>State servant</td>\n","      <td>Higher education</td>\n","      <td>Married</td>\n","      <td>House / apartment</td>\n","      <td>-18964</td>\n","      <td>-8671</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Core staff</td>\n","      <td>2.0</td>\n","      <td>-36.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26459</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>69372.0</td>\n","      <td>Working</td>\n","      <td>Secondary / secondary special</td>\n","      <td>Married</td>\n","      <td>House / apartment</td>\n","      <td>-15887</td>\n","      <td>-217</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Laborers</td>\n","      <td>2.0</td>\n","      <td>-40.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>26460</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>0</td>\n","      <td>112500.0</td>\n","      <td>Commercial associate</td>\n","      <td>Secondary / secondary special</td>\n","      <td>Married</td>\n","      <td>House / apartment</td>\n","      <td>-19270</td>\n","      <td>-2531</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Drivers</td>\n","      <td>2.0</td>\n","      <td>-41.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>26461</td>\n","      <td>F</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>225000.0</td>\n","      <td>State servant</td>\n","      <td>Higher education</td>\n","      <td>Married</td>\n","      <td>House / apartment</td>\n","      <td>-17822</td>\n","      <td>-9385</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Managers</td>\n","      <td>2.0</td>\n","      <td>-8.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   index gender car reality  child_num  income_total           income_type  \\\n","0  26457      M   Y       N          0      112500.0             Pensioner   \n","1  26458      F   N       Y          0      135000.0         State servant   \n","2  26459      F   N       Y          0       69372.0               Working   \n","3  26460      M   Y       N          0      112500.0  Commercial associate   \n","4  26461      F   Y       Y          0      225000.0         State servant   \n","\n","                        edu_type     family_type         house_type  \\\n","0  Secondary / secondary special  Civil marriage  House / apartment   \n","1               Higher education         Married  House / apartment   \n","2  Secondary / secondary special         Married  House / apartment   \n","3  Secondary / secondary special         Married  House / apartment   \n","4               Higher education         Married  House / apartment   \n","\n","   DAYS_BIRTH  DAYS_EMPLOYED  FLAG_MOBIL  work_phone  phone  email  \\\n","0      -21990         365243           1           0      1      0   \n","1      -18964          -8671           1           0      1      0   \n","2      -15887           -217           1           1      1      0   \n","3      -19270          -2531           1           1      0      0   \n","4      -17822          -9385           1           1      0      0   \n","\n","   occyp_type  family_size  begin_month  \n","0         NaN          2.0        -60.0  \n","1  Core staff          2.0        -36.0  \n","2    Laborers          2.0        -40.0  \n","3     Drivers          2.0        -41.0  \n","4    Managers          2.0         -8.0  "]},"metadata":{"tags":[]},"execution_count":126}]},{"cell_type":"markdown","metadata":{"id":"9dOT0DNzNt4K"},"source":["## 1. 결측치 처리"]},{"cell_type":"code","metadata":{"id":"et_w3U3mv5Ht"},"source":["train.fillna('NaN', inplace=True) \n","test.fillna('NaN', inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7nOr5qupFPDg"},"source":["## 2. binary transform "]},{"cell_type":"code","metadata":{"id":"jarDXDRIETuE"},"source":["# binary transform (0, 1)\n","\n","train.gender = train.gender.replace(['F','M'],[0,1])  \n","test.gender = test.gender.replace(['F','M'],[0,1])\n","\n","train.car = train.car.replace(['N','Y'],[0,1])  \n","test.car = test.car.replace(['N','Y'],[0,1])\n","\n","train.reality = train.reality.replace(['N','Y'],[0,1])  \n","test.reality = test.reality.replace(['N','Y'],[0,1])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X6FOwD1NFdMX"},"source":["## 3. value transform "]},{"cell_type":"code","metadata":{"id":"0vEXfm16ETrO"},"source":["# transform negative to positive\n","\n","train.DAYS_BIRTH = -train.DAYS_BIRTH\n","test.DAYS_BIRTH = -test.DAYS_BIRTH\n","\n","train.DAYS_EMPLOYED = -train.DAYS_EMPLOYED\n","test.DAYS_EMPLOYED = -test.DAYS_EMPLOYED\n","\n","train.begin_month = -train.begin_month\n","test.begin_month = -test.begin_month"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q-2c3wwLETo4"},"source":["# 365243 인 값 0으로 바꾸기\n","train.DAYS_EMPLOYED = train.DAYS_EMPLOYED.replace([-365243],[0])\n","test.DAYS_EMPLOYED = test.DAYS_EMPLOYED.replace([-365243],[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_f75lAKCETmo"},"source":["# 360으로 나눠서 나이, 일한 년수 계산\n","\n","train['EMPLOYED']= train.DAYS_EMPLOYED.apply(lambda x: abs(x/360) )\n","train['age']= train.DAYS_BIRTH.apply(lambda x: abs(x/360) ).astype(int)\n","train['begin_month']= train.begin_month.apply(lambda x: abs(x) ).astype(int)\n","\n","test['EMPLOYED']= test.DAYS_EMPLOYED.apply(lambda x: abs(x/360) )\n","test['age']= test.DAYS_BIRTH.apply(lambda x: abs(x/360) ).astype(int)\n","test['begin_month']= test.begin_month.apply(lambda x: abs(x) ).astype(int)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wv1rPVSKYtIe"},"source":["## 4. child_num & family_size"]},{"cell_type":"markdown","metadata":{"id":"wKtuhxHEYkgA"},"source":["- 나중에 에러 떠서 이상치 제거는 안함\n","- pca 변수 추가 안하는 게 더 나았음"]},{"cell_type":"markdown","metadata":{"id":"g4wZniXKZi8d"},"source":["## 5. income / family size 변수 생성"]},{"cell_type":"code","metadata":{"id":"3LyGSvwWZi8d"},"source":["train['if_ratio'] = train['income_total'] / train['family_size']\n","test['if_ratio'] = test['income_total'] / test['family_size']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z8E3IdMYZi8d"},"source":["## 6. 통합 핸드폰 관련 변수 생성"]},{"cell_type":"code","metadata":{"id":"Ma6fUtM1Zi8d"},"source":["def try_t(data):\n","  data.loc[(data['work_phone'] == 0)&(data['phone'] == 0)&(data['email'] == 0), 'try'] = 0\n","  data.loc[(data['work_phone'] == 0)&(data['phone'] == 0)&(data['email'] == 1), 'try'] = 1\n","  data.loc[(data['work_phone'] == 0)&(data['phone'] == 1)&(data['email'] == 0), 'try'] = 2\n","  data.loc[(data['work_phone'] == 1)&(data['phone'] == 0)&(data['email'] == 0), 'try'] = 3\n","  data.loc[(data['work_phone'] == 0)&(data['phone'] == 1)&(data['email'] == 1), 'try'] = 4\n","  data.loc[(data['work_phone'] == 1)&(data['phone'] == 0)&(data['email'] == 1), 'try'] = 5\n","  data.loc[(data['work_phone'] == 1)&(data['phone'] == 1)&(data['email'] == 0), 'try'] = 6\n","  data.loc[(data['work_phone'] == 1)&(data['phone'] == 1)&(data['email'] == 1), 'try'] = 7\n","\n","try_t(train)\n","try_t(test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qDLFNfiqZi8f"},"source":["## 7. 대체된 열 / 미사용 변수 삭제"]},{"cell_type":"code","metadata":{"id":"RU70kBgKZi8f"},"source":["train = train.drop(['index', 'FLAG_MOBIL', 'DAYS_BIRTH', 'DAYS_EMPLOYED', \n","                    'work_phone', 'phone', 'email'],axis=1)\n","\n","test = test.drop(['index', 'FLAG_MOBIL', 'DAYS_BIRTH', 'DAYS_EMPLOYED',\n","                   'work_phone', 'phone', 'email'],axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v4IBpBPqZi8f"},"source":["&nbsp;"]},{"cell_type":"markdown","metadata":{"id":"daR57pgiZi8g"},"source":["## 8. 스케일링 / 인코딩"]},{"cell_type":"markdown","metadata":{"id":"dQCawNqnZi8g"},"source":["### 1) log scailing - income_total"]},{"cell_type":"code","metadata":{"id":"1yN4ESeGZi8g"},"source":["# train에 로그변환한 변수로 바꾸기\n","tr_it=train['income_total']\n","tr_it_log = np.log1p(tr_it)\n","train['income_total']= tr_it_log\n","# test set\n","te_it=test['income_total']\n","te_it_log = np.log1p(te_it)\n","test['income_total']= te_it_log"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NDyIMxPhZi8g"},"source":["### 2) ordinal encoding"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r_YCMRg0Zi8g","executionInfo":{"elapsed":279,"status":"ok","timestamp":1623351806142,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"db0cafb7-9e9a-4e32-e07a-ccef304ac43e"},"source":["numerical_feats = train.dtypes[train.dtypes != \"object\"].index.tolist()\n","numerical_feats.remove('credit')\n","print(\"Number of Numerical features: \", len(numerical_feats))\n","\n","categorical_feats = train.dtypes[train.dtypes == \"object\"].index.tolist()\n","print(\"Number of Categorical features: \", len(categorical_feats))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Number of Numerical features:  11\n","Number of Categorical features:  5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Eiz0SlJEZi8i"},"source":["카테고리 변수에 ordinal encoding 적용"]},{"cell_type":"code","metadata":{"id":"7CBXS2EmZi8i"},"source":["#! pip install --upgrade category_encoders\n","from category_encoders.ordinal import OrdinalEncoder\n","encoder = OrdinalEncoder(categorical_feats)\n","train[categorical_feats] = encoder.fit_transform(train[categorical_feats], train['credit'])\n","test[categorical_feats] = encoder.transform(test[categorical_feats])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KhihxidvZi8i"},"source":["### 3) standard scailing"]},{"cell_type":"markdown","metadata":{"id":"qiUosisPZi8i"},"source":["income_total을 제외한 수치형 변수들에 standard scailing 진행"]},{"cell_type":"code","metadata":{"id":"9Rgz4IM_Zi8j"},"source":["#numerical_feats.remove('income_total')\n","scaler = StandardScaler()\n","train[numerical_feats] = scaler.fit_transform(train[numerical_feats])\n","test[numerical_feats] = scaler.transform(test[numerical_feats])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IjWQgp8hZi8j"},"source":["&nbsp;"]},{"cell_type":"markdown","metadata":{"id":"HMFuG5V7Zi8k"},"source":["## 최종데이터셋"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H8TxRzCoZi8k","executionInfo":{"elapsed":349,"status":"ok","timestamp":1622802754856,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"0b336177-b5f3-4a09-e7a4-31f68aec55f6"},"source":["train.info()\n","test.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 26457 entries, 0 to 26456\n","Data columns (total 17 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   gender        26457 non-null  float64\n"," 1   car           26457 non-null  float64\n"," 2   reality       26457 non-null  float64\n"," 3   child_num     26457 non-null  float64\n"," 4   income_total  26457 non-null  float64\n"," 5   income_type   26457 non-null  int64  \n"," 6   edu_type      26457 non-null  int64  \n"," 7   family_type   26457 non-null  int64  \n"," 8   house_type    26457 non-null  int64  \n"," 9   occyp_type    26457 non-null  int64  \n"," 10  family_size   26457 non-null  float64\n"," 11  begin_month   26457 non-null  float64\n"," 12  credit        26457 non-null  float64\n"," 13  EMPLOYED      26457 non-null  float64\n"," 14  age           26457 non-null  float64\n"," 15  if_ratio      26457 non-null  float64\n"," 16  try           26457 non-null  float64\n","dtypes: float64(12), int64(5)\n","memory usage: 3.4 MB\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10000 entries, 0 to 9999\n","Data columns (total 16 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   gender        10000 non-null  float64\n"," 1   car           10000 non-null  float64\n"," 2   reality       10000 non-null  float64\n"," 3   child_num     10000 non-null  float64\n"," 4   income_total  10000 non-null  float64\n"," 5   income_type   10000 non-null  int64  \n"," 6   edu_type      10000 non-null  int64  \n"," 7   family_type   10000 non-null  int64  \n"," 8   house_type    10000 non-null  int64  \n"," 9   occyp_type    10000 non-null  int64  \n"," 10  family_size   10000 non-null  float64\n"," 11  begin_month   10000 non-null  float64\n"," 12  EMPLOYED      10000 non-null  float64\n"," 13  age           10000 non-null  float64\n"," 14  if_ratio      10000 non-null  float64\n"," 15  try           10000 non-null  float64\n","dtypes: float64(11), int64(5)\n","memory usage: 1.2 MB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iwlz4GMrgEdm"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"11I6MFCHlFwR"},"source":["# DL: Tabnet"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LvUWEc_npWpq","executionInfo":{"elapsed":14185,"status":"ok","timestamp":1623356406453,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"58fd265e-9512-43cc-a800-34f5db079d35"},"source":["#pytorch instaal \n","#!pip uninstall -y typing # this should avoid  AttributeError: type object 'Callable' has no attribute '_abc_registry'\n","\n","#!pip install  \"git+https://github.com/dreamquark-ai/tabnet.git@develop#egg=pytorch_tabnet\" --upgrade"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[33mWARNING: Skipping typing as it is not installed.\u001b[0m\n","Collecting pytorch_tabnet\n","  Cloning https://github.com/dreamquark-ai/tabnet.git (to revision develop) to /tmp/pip-install-uxrjv0dx/pytorch-tabnet\n","  Running command git clone -q https://github.com/dreamquark-ai/tabnet.git /tmp/pip-install-uxrjv0dx/pytorch-tabnet\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied, skipping upgrade: torch<2.0,>=1.2 in /usr/local/lib/python3.7/dist-packages (from pytorch_tabnet) (1.8.1+cu101)\n","Requirement already satisfied, skipping upgrade: tqdm<5.0,>=4.36 in /usr/local/lib/python3.7/dist-packages (from pytorch_tabnet) (4.41.1)\n","Requirement already satisfied, skipping upgrade: scikit_learn>0.21 in /usr/local/lib/python3.7/dist-packages (from pytorch_tabnet) (0.22.2.post1)\n","Requirement already satisfied, skipping upgrade: numpy<2.0,>=1.17 in /usr/local/lib/python3.7/dist-packages (from pytorch_tabnet) (1.19.5)\n","Requirement already satisfied, skipping upgrade: scipy>1.4 in /usr/local/lib/python3.7/dist-packages (from pytorch_tabnet) (1.4.1)\n","Requirement already satisfied, skipping upgrade: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch<2.0,>=1.2->pytorch_tabnet) (3.7.4.3)\n","Requirement already satisfied, skipping upgrade: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit_learn>0.21->pytorch_tabnet) (1.0.1)\n","Building wheels for collected packages: pytorch-tabnet\n","  Building wheel for pytorch-tabnet (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pytorch-tabnet: filename=pytorch_tabnet-3.1.1-cp37-none-any.whl size=39657 sha256=b635923680180f648593597b47cfb7555f6373bc3f0cf06c2d6a2d47b11453df\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-8fxvy4t9/wheels/a5/fe/e1/d7be493728d1fb7284583f5449d4cad80139ee994ef420f522\n","Successfully built pytorch-tabnet\n","Installing collected packages: pytorch-tabnet\n","Successfully installed pytorch-tabnet-3.1.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PbymezBBhi9N"},"source":["#check the data \n","train_x=train.drop('credit', axis=1)\n","train_y=train[['credit']]\n","test_x=test\n","\n","train_x.head()\n","train_y.head()\n","test_x.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"27IiBRYwhi4G"},"source":["#train set을 train과 validation로 분리\n","np.random.seed(42)\n","if \"Set\" not in train.columns:\n","    train[\"Set\"] = np.random.choice([\"train\", \"valid\"], p =[.8, .2], size=(train.shape[0],))\n","\n","train_indices = train_x[train.Set==\"train\"].index\n","valid_indices = train_x[train.Set==\"valid\"].index"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":528,"referenced_widgets":["efe1ce34830e4b52a42003aa0a44ad43","e7d97efa5eb649f48029595825194d4c","3ed9d452d4af4d428a031fae20ec3944","7a50465fbb5348229b2e66fc5da518be","a2e6897cf11f4c5aabfac81eb0d72b88","4595128a4a2e4397ad4d4a7341eab696","019ae8467a574e9f82c825ee477fe99c","6fde6a6857a04bb8a7bd464d83bca335"]},"id":"VnwS3HoUhi0l","executionInfo":{"elapsed":473,"status":"ok","timestamp":1622802780416,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"8531c0ce-3477-45f2-f9fd-762e9b41d98f"},"source":["nunique = train.nunique()\n","types = train.dtypes\n","\n","categorical_columns = []\n","categorical_dims =  {}\n","for col in tqdm(train_x.columns):\n","    if types[col] == 'object' or nunique[col] < 200:\n","        print(col, train_x[col].nunique())\n","        l_enc = LabelEncoder()\n","        train_x[col] = train_x[col].fillna(\"NaN\")\n","        train_x[col] = l_enc.fit_transform(train_x[col].values)\n","        try:\n","            test_X[col] = test_x[col].fillna(\"NaN\")\n","            test_x[col] = l_enc.transform(test_x[col].values)\n","        except:\n","            print(f\"Column {col} does not exist in test set\")\n","        categorical_columns.append(col)\n","        categorical_dims[col] = len(l_enc.classes_)\n","    else:\n","        training_mean = train_x.loc[train_indices, col].mean()\n","        train.fillna(training_mean, inplace=True)\n","        test.fillna(training_mean, inplace=True)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"efe1ce34830e4b52a42003aa0a44ad43","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=16.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["gender 2\n","Column gender does not exist in test set\n","car 2\n","Column car does not exist in test set\n","reality 2\n","Column reality does not exist in test set\n","child_num 9\n","Column child_num does not exist in test set\n","income_type 5\n","Column income_type does not exist in test set\n","edu_type 5\n","Column edu_type does not exist in test set\n","family_type 5\n","Column family_type does not exist in test set\n","house_type 6\n","Column house_type does not exist in test set\n","occyp_type 19\n","Column occyp_type does not exist in test set\n","family_size 10\n","Column family_size does not exist in test set\n","begin_month 61\n","Column begin_month does not exist in test set\n","age 49\n","Column age does not exist in test set\n","try 8\n","Column try does not exist in test set\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Egdo-B2RR6kF"},"source":["features = [ col for col in train_x.columns] \n","\n","cat_idxs = [ i for i, f in enumerate(features) if f in categorical_columns]\n","\n","cat_dims = [ categorical_dims[f] for i, f in enumerate(features) if f in categorical_columns]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wPhJHA5KS_ug","executionInfo":{"elapsed":8,"status":"ok","timestamp":1622802787009,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"611553f8-5fb0-4cd0-e3c1-8c5361756072"},"source":["train_indices\n","valid_indices"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Int64Index([    0,     2,     3,     4,     5,     6,     8,     9,    10,\n","               13,\n","            ...\n","            26443, 26446, 26447, 26448, 26450, 26451, 26453, 26454, 26455,\n","            26456],\n","           dtype='int64', length=21162)"]},"metadata":{"tags":[]},"execution_count":144},{"output_type":"execute_result","data":{"text/plain":["Int64Index([    1,     7,    11,    12,    33,    34,    35,    43,    50,\n","               52,\n","            ...\n","            26419, 26424, 26427, 26434, 26436, 26440, 26444, 26445, 26449,\n","            26452],\n","           dtype='int64', length=5295)"]},"metadata":{"tags":[]},"execution_count":144}]},{"cell_type":"code","metadata":{"id":"lnsZAPzB8T_n"},"source":["X_train = train_x[features].values[:21162]\n","y_train = train_y.values[:21162]\n","\n","X_valid = train_x[features].values[21162:]\n","y_valid = train_y.values[21162:]\n","\n","X_test = test_x[features].values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"743uk46H8T0y","executionInfo":{"elapsed":354,"status":"ok","timestamp":1622802798085,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"c3eb4b1f-a200-4f0b-9b21-09c4c8157ffb"},"source":["clf = TabNetMultiTaskClassifier(n_steps=1,\n","                                optimizer_fn=torch.optim.Adam,\n","                                optimizer_params=dict(lr=2e-2),\n","                                scheduler_params={\"step_size\":50,\n","                                                  \"gamma\":0.9},\n","                                scheduler_fn=torch.optim.lr_scheduler.StepLR,\n","                                mask_type='entmax', \n","                                lambda_sparse=0, \n","                       \n","                      )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Device used : cuda\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"_JbBhkaJ8Tsz","executionInfo":{"elapsed":125987,"status":"ok","timestamp":1622802927246,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"d5a523f7-7061-48a2-a7ae-eca7f3eaa7e8"},"source":["max_epochs = 1000\n","clf.fit(\n","    X_train=X_train, y_train=y_train,\n","    max_epochs=max_epochs ,\n","    patience=50,\n","    batch_size=1024,\n","    virtual_batch_size=128,\n","    num_workers=1,\n","    eval_set=[(X_valid, y_valid)],\n","    drop_last=False,\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch 0  | loss: 0.9499  | val_0_logloss: 1.00931 |  0:00:01s\n","epoch 1  | loss: 0.87468 | val_0_logloss: 0.90197 |  0:00:01s\n","epoch 2  | loss: 0.86419 | val_0_logloss: 0.88869 |  0:00:02s\n","epoch 3  | loss: 0.85181 | val_0_logloss: 0.88193 |  0:00:03s\n","epoch 4  | loss: 0.83369 | val_0_logloss: 0.88122 |  0:00:03s\n","epoch 5  | loss: 0.82258 | val_0_logloss: 0.87983 |  0:00:04s\n","epoch 6  | loss: 0.8174  | val_0_logloss: 0.88328 |  0:00:05s\n","epoch 7  | loss: 0.81328 | val_0_logloss: 0.84924 |  0:00:05s\n","epoch 8  | loss: 0.81198 | val_0_logloss: 0.84462 |  0:00:06s\n","epoch 9  | loss: 0.81147 | val_0_logloss: 0.8475  |  0:00:07s\n","epoch 10 | loss: 0.80703 | val_0_logloss: 0.84224 |  0:00:08s\n","epoch 11 | loss: 0.80688 | val_0_logloss: 0.82483 |  0:00:08s\n","epoch 12 | loss: 0.80496 | val_0_logloss: 0.83879 |  0:00:09s\n","epoch 13 | loss: 0.80442 | val_0_logloss: 0.82158 |  0:00:10s\n","epoch 14 | loss: 0.80117 | val_0_logloss: 0.8282  |  0:00:10s\n","epoch 15 | loss: 0.80315 | val_0_logloss: 0.83188 |  0:00:11s\n","epoch 16 | loss: 0.80135 | val_0_logloss: 0.82005 |  0:00:12s\n","epoch 17 | loss: 0.8025  | val_0_logloss: 0.825   |  0:00:13s\n","epoch 18 | loss: 0.80082 | val_0_logloss: 0.82345 |  0:00:13s\n","epoch 19 | loss: 0.79671 | val_0_logloss: 0.84431 |  0:00:14s\n","epoch 20 | loss: 0.80157 | val_0_logloss: 0.8282  |  0:00:15s\n","epoch 21 | loss: 0.79528 | val_0_logloss: 0.82238 |  0:00:15s\n","epoch 22 | loss: 0.79553 | val_0_logloss: 0.81898 |  0:00:16s\n","epoch 23 | loss: 0.79438 | val_0_logloss: 0.81926 |  0:00:17s\n","epoch 24 | loss: 0.79466 | val_0_logloss: 0.82179 |  0:00:17s\n","epoch 25 | loss: 0.79484 | val_0_logloss: 0.81472 |  0:00:18s\n","epoch 26 | loss: 0.78974 | val_0_logloss: 0.82128 |  0:00:19s\n","epoch 27 | loss: 0.79162 | val_0_logloss: 0.81725 |  0:00:20s\n","epoch 28 | loss: 0.791   | val_0_logloss: 0.8224  |  0:00:20s\n","epoch 29 | loss: 0.78924 | val_0_logloss: 0.82113 |  0:00:21s\n","epoch 30 | loss: 0.79062 | val_0_logloss: 0.82203 |  0:00:22s\n","epoch 31 | loss: 0.78994 | val_0_logloss: 0.82153 |  0:00:22s\n","epoch 32 | loss: 0.78854 | val_0_logloss: 0.82043 |  0:00:23s\n","epoch 33 | loss: 0.78737 | val_0_logloss: 0.82105 |  0:00:24s\n","epoch 34 | loss: 0.78609 | val_0_logloss: 0.82238 |  0:00:25s\n","epoch 35 | loss: 0.78485 | val_0_logloss: 0.8175  |  0:00:25s\n","epoch 36 | loss: 0.78462 | val_0_logloss: 0.82607 |  0:00:26s\n","epoch 37 | loss: 0.78503 | val_0_logloss: 0.82869 |  0:00:27s\n","epoch 38 | loss: 0.78514 | val_0_logloss: 0.81608 |  0:00:27s\n","epoch 39 | loss: 0.78258 | val_0_logloss: 0.81863 |  0:00:28s\n","epoch 40 | loss: 0.78165 | val_0_logloss: 0.82207 |  0:00:29s\n","epoch 41 | loss: 0.78021 | val_0_logloss: 0.82241 |  0:00:29s\n","epoch 42 | loss: 0.78159 | val_0_logloss: 0.8194  |  0:00:30s\n","epoch 43 | loss: 0.77982 | val_0_logloss: 0.81422 |  0:00:31s\n","epoch 44 | loss: 0.77866 | val_0_logloss: 0.82257 |  0:00:31s\n","epoch 45 | loss: 0.77746 | val_0_logloss: 0.81844 |  0:00:32s\n","epoch 46 | loss: 0.77968 | val_0_logloss: 0.82212 |  0:00:33s\n","epoch 47 | loss: 0.77658 | val_0_logloss: 0.83238 |  0:00:33s\n","epoch 48 | loss: 0.77804 | val_0_logloss: 0.81883 |  0:00:34s\n","epoch 49 | loss: 0.77657 | val_0_logloss: 0.82498 |  0:00:35s\n","epoch 50 | loss: 0.77705 | val_0_logloss: 0.81801 |  0:00:35s\n","epoch 51 | loss: 0.77024 | val_0_logloss: 0.82492 |  0:00:36s\n","epoch 52 | loss: 0.7701  | val_0_logloss: 0.82135 |  0:00:37s\n","epoch 53 | loss: 0.77071 | val_0_logloss: 0.82345 |  0:00:37s\n","epoch 54 | loss: 0.76848 | val_0_logloss: 0.81949 |  0:00:38s\n","epoch 55 | loss: 0.76825 | val_0_logloss: 0.81855 |  0:00:39s\n","epoch 56 | loss: 0.76668 | val_0_logloss: 0.8254  |  0:00:39s\n","epoch 57 | loss: 0.76643 | val_0_logloss: 0.81892 |  0:00:40s\n","epoch 58 | loss: 0.76847 | val_0_logloss: 0.81856 |  0:00:41s\n","epoch 59 | loss: 0.76462 | val_0_logloss: 0.81201 |  0:00:42s\n","epoch 60 | loss: 0.76403 | val_0_logloss: 0.81953 |  0:00:42s\n","epoch 61 | loss: 0.76958 | val_0_logloss: 0.8185  |  0:00:43s\n","epoch 62 | loss: 0.76603 | val_0_logloss: 0.81889 |  0:00:44s\n","epoch 63 | loss: 0.76561 | val_0_logloss: 0.8202  |  0:00:44s\n","epoch 64 | loss: 0.7651  | val_0_logloss: 0.81773 |  0:00:45s\n","epoch 65 | loss: 0.76342 | val_0_logloss: 0.81972 |  0:00:46s\n","epoch 66 | loss: 0.75969 | val_0_logloss: 0.82811 |  0:00:46s\n","epoch 67 | loss: 0.75989 | val_0_logloss: 0.82003 |  0:00:47s\n","epoch 68 | loss: 0.76284 | val_0_logloss: 0.8243  |  0:00:48s\n","epoch 69 | loss: 0.75705 | val_0_logloss: 0.81942 |  0:00:48s\n","epoch 70 | loss: 0.75595 | val_0_logloss: 0.82757 |  0:00:49s\n","epoch 71 | loss: 0.75823 | val_0_logloss: 0.83023 |  0:00:50s\n","epoch 72 | loss: 0.75747 | val_0_logloss: 0.82606 |  0:00:50s\n","epoch 73 | loss: 0.75959 | val_0_logloss: 0.83325 |  0:00:51s\n","epoch 74 | loss: 0.75742 | val_0_logloss: 0.82449 |  0:00:52s\n","epoch 75 | loss: 0.75792 | val_0_logloss: 0.81674 |  0:00:53s\n","epoch 76 | loss: 0.75268 | val_0_logloss: 0.82239 |  0:00:53s\n","epoch 77 | loss: 0.75449 | val_0_logloss: 0.8253  |  0:00:54s\n","epoch 78 | loss: 0.75184 | val_0_logloss: 0.82155 |  0:00:55s\n","epoch 79 | loss: 0.75099 | val_0_logloss: 0.81962 |  0:00:55s\n","epoch 80 | loss: 0.75383 | val_0_logloss: 0.82748 |  0:00:56s\n","epoch 81 | loss: 0.75063 | val_0_logloss: 0.82031 |  0:00:57s\n","epoch 82 | loss: 0.75222 | val_0_logloss: 0.82176 |  0:00:57s\n","epoch 83 | loss: 0.75231 | val_0_logloss: 0.82036 |  0:00:58s\n","epoch 84 | loss: 0.75265 | val_0_logloss: 0.82188 |  0:00:59s\n","epoch 85 | loss: 0.74792 | val_0_logloss: 0.82446 |  0:00:59s\n","epoch 86 | loss: 0.75    | val_0_logloss: 0.82393 |  0:01:00s\n","epoch 87 | loss: 0.74989 | val_0_logloss: 0.82735 |  0:01:01s\n","epoch 88 | loss: 0.74463 | val_0_logloss: 0.82159 |  0:01:01s\n","epoch 89 | loss: 0.7482  | val_0_logloss: 0.83499 |  0:01:02s\n","epoch 90 | loss: 0.74511 | val_0_logloss: 0.82458 |  0:01:03s\n","epoch 91 | loss: 0.74855 | val_0_logloss: 0.82781 |  0:01:04s\n","epoch 92 | loss: 0.74666 | val_0_logloss: 0.8329  |  0:01:04s\n","epoch 93 | loss: 0.75035 | val_0_logloss: 0.8171  |  0:01:05s\n","epoch 94 | loss: 0.74498 | val_0_logloss: 0.82503 |  0:01:06s\n","epoch 95 | loss: 0.74525 | val_0_logloss: 0.82089 |  0:01:06s\n","epoch 96 | loss: 0.74952 | val_0_logloss: 0.82641 |  0:01:07s\n","epoch 97 | loss: 0.74654 | val_0_logloss: 0.82344 |  0:01:08s\n","epoch 98 | loss: 0.74348 | val_0_logloss: 0.82949 |  0:01:08s\n","epoch 99 | loss: 0.74223 | val_0_logloss: 0.82444 |  0:01:09s\n","epoch 100| loss: 0.74403 | val_0_logloss: 0.82836 |  0:01:10s\n","epoch 101| loss: 0.73843 | val_0_logloss: 0.82727 |  0:01:10s\n","epoch 102| loss: 0.7386  | val_0_logloss: 0.82334 |  0:01:11s\n","epoch 103| loss: 0.74017 | val_0_logloss: 0.82865 |  0:01:12s\n","epoch 104| loss: 0.74419 | val_0_logloss: 0.82359 |  0:01:12s\n","epoch 105| loss: 0.73982 | val_0_logloss: 0.83326 |  0:01:13s\n","epoch 106| loss: 0.73681 | val_0_logloss: 0.83198 |  0:01:14s\n","epoch 107| loss: 0.73439 | val_0_logloss: 0.83132 |  0:01:14s\n","epoch 108| loss: 0.73803 | val_0_logloss: 0.82961 |  0:01:15s\n","epoch 109| loss: 0.74015 | val_0_logloss: 0.8278  |  0:01:16s\n","\n","Early stopping occurred at epoch 109 with best_epoch = 59 and best_val_0_logloss = 0.81201\n","Best weights from best epoch are automatically used!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"W1j6JysX5R3v"},"source":["preds_valid = clf.predict_proba(X_valid) \n","preds_test = clf.predict_proba(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-BMYrroul1X9"},"source":["Feature importances"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"0mcOWIOU2KF1","executionInfo":{"elapsed":1498,"status":"ok","timestamp":1622803548118,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"f0690e6c-3351-44d6-fc34-f681a37d32ab"},"source":["def plot_feature_importance(importance,names,model_type):\n","    \n","    feature_importance = importance\n","    feature_names = np.array(names)\n","    \n","    data={'feature_names':feature_names,'feature_importance':feature_importance}\n","    fi_df = pd.DataFrame(data)\n","    \n","    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n","\n","    plt.figure(figsize=(10,8))\n","\n","    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n","\n","    plt.title(model_type + ' Feature Importance')\n","    plt.xlabel('Feature Importance')\n","    plt.ylabel('Feature Names')\n","\n","plot_feature_importance(clf.feature_importances_,test_x.columns,'TabNet')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x576 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gjOiDjekMhYz","executionInfo":{"elapsed":514,"status":"ok","timestamp":1622802979370,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"95e2621b-bef6-45a3-ce26-991257470ff5"},"source":["#제출용 파일 만들기\n","i, j, k = [], [], []\n","for row in range(10000):\n","  i.append(preds_test[0][row][0])\n","  j.append(preds_test[0][row][1])\n","  k.append(preds_test[0][row][2])\n","\n","submission['0'] = i\n","submission['1'] = j\n","submission['2'] = k\n","submission\n","\n","submission.to_csv(\"submisison_tabnet.csv\",index=False) #store the result"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 10000, 10000)"]},"metadata":{"tags":[]},"execution_count":152}]},{"cell_type":"markdown","metadata":{"id":"8mJfM1REVY-Y"},"source":["# ML: LGBM"]},{"cell_type":"code","metadata":{"id":"JElOCQeWXenN"},"source":["skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","folds=[]\n","for train_idx, valid_idx in skf.split(train, train['credit']):\n","    folds.append((train_idx, valid_idx))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OLwcYWnTVC6x","executionInfo":{"elapsed":21031,"status":"ok","timestamp":1623352734839,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"bca206e2-a9ed-4a5e-eea4-a93126235b3d"},"source":["np.random.seed(42)\n","lgb_models={}\n","n_est = 2000\n","seed = 42\n","n_class = 3\n","\n","lgbm_pred = np.zeros((train_x.shape[0], n_class))\n","lgbm_pred_test = np.zeros((test_x.shape[0], n_class))\n","for fold in range(5):\n","    print(f'===================================={fold+1}============================================')\n","    train_idx, valid_idx = folds[fold]\n","    X_train, X_valid, y_train, y_valid = train_x.iloc[train_idx], train_x.iloc[valid_idx], train_y.iloc[train_idx], train_y.iloc[valid_idx]\n","\n","    lgb = LGBMClassifier(n_estimators=1000)\n","    lgb.fit(X_train, y_train, \n","            eval_set=[(X_train, y_train), (X_valid, y_valid)], \n","            early_stopping_rounds=30,\n","           verbose=100)\n","    lgb_models[fold]=lgb\n","    lgbm_pred[valid_idx] = lgb_models[fold].predict_proba(X_valid)\n","    print(f'CV Log Loss Score: {log_loss(y_valid, lgbm_pred[valid_idx]):.6f}')\n","    print(f'================================================================================\\n\\n')\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["====================================1============================================\n","Training until validation scores don't improve for 30 rounds.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[100]\ttraining's multi_logloss: 0.679083\tvalid_1's multi_logloss: 0.756521\n","[200]\ttraining's multi_logloss: 0.603624\tvalid_1's multi_logloss: 0.737403\n","[300]\ttraining's multi_logloss: 0.547488\tvalid_1's multi_logloss: 0.728048\n","[400]\ttraining's multi_logloss: 0.501799\tvalid_1's multi_logloss: 0.72517\n","Early stopping, best iteration is:\n","[404]\ttraining's multi_logloss: 0.499964\tvalid_1's multi_logloss: 0.725011\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n","               importance_type='split', learning_rate=0.1, max_depth=-1,\n","               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n","               n_estimators=1000, n_jobs=-1, num_leaves=31, objective=None,\n","               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n","               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)"]},"metadata":{"tags":[]},"execution_count":33},{"output_type":"stream","text":["CV Log Loss Score: 0.725011\n","================================================================================\n","\n","\n","====================================2============================================\n","Training until validation scores don't improve for 30 rounds.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[100]\ttraining's multi_logloss: 0.675109\tvalid_1's multi_logloss: 0.770144\n","[200]\ttraining's multi_logloss: 0.600134\tvalid_1's multi_logloss: 0.757526\n","[300]\ttraining's multi_logloss: 0.543765\tvalid_1's multi_logloss: 0.753826\n","Early stopping, best iteration is:\n","[353]\ttraining's multi_logloss: 0.517532\tvalid_1's multi_logloss: 0.752409\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n","               importance_type='split', learning_rate=0.1, max_depth=-1,\n","               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n","               n_estimators=1000, n_jobs=-1, num_leaves=31, objective=None,\n","               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n","               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)"]},"metadata":{"tags":[]},"execution_count":33},{"output_type":"stream","text":["CV Log Loss Score: 0.752409\n","================================================================================\n","\n","\n","====================================3============================================\n","Training until validation scores don't improve for 30 rounds.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[100]\ttraining's multi_logloss: 0.680116\tvalid_1's multi_logloss: 0.764877\n","[200]\ttraining's multi_logloss: 0.604118\tvalid_1's multi_logloss: 0.748512\n","[300]\ttraining's multi_logloss: 0.546733\tvalid_1's multi_logloss: 0.743249\n","Early stopping, best iteration is:\n","[329]\ttraining's multi_logloss: 0.532044\tvalid_1's multi_logloss: 0.742695\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n","               importance_type='split', learning_rate=0.1, max_depth=-1,\n","               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n","               n_estimators=1000, n_jobs=-1, num_leaves=31, objective=None,\n","               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n","               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)"]},"metadata":{"tags":[]},"execution_count":33},{"output_type":"stream","text":["CV Log Loss Score: 0.742695\n","================================================================================\n","\n","\n","====================================4============================================\n","Training until validation scores don't improve for 30 rounds.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[100]\ttraining's multi_logloss: 0.676225\tvalid_1's multi_logloss: 0.761872\n","[200]\ttraining's multi_logloss: 0.599586\tvalid_1's multi_logloss: 0.746289\n","[300]\ttraining's multi_logloss: 0.543149\tvalid_1's multi_logloss: 0.739342\n","[400]\ttraining's multi_logloss: 0.497662\tvalid_1's multi_logloss: 0.737251\n","Early stopping, best iteration is:\n","[417]\ttraining's multi_logloss: 0.491012\tvalid_1's multi_logloss: 0.736899\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n","               importance_type='split', learning_rate=0.1, max_depth=-1,\n","               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n","               n_estimators=1000, n_jobs=-1, num_leaves=31, objective=None,\n","               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n","               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)"]},"metadata":{"tags":[]},"execution_count":33},{"output_type":"stream","text":["CV Log Loss Score: 0.736899\n","================================================================================\n","\n","\n","====================================5============================================\n","Training until validation scores don't improve for 30 rounds.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"stream","text":["[100]\ttraining's multi_logloss: 0.676814\tvalid_1's multi_logloss: 0.762084\n","[200]\ttraining's multi_logloss: 0.603034\tvalid_1's multi_logloss: 0.747512\n","[300]\ttraining's multi_logloss: 0.543655\tvalid_1's multi_logloss: 0.740595\n","Early stopping, best iteration is:\n","[358]\ttraining's multi_logloss: 0.516123\tvalid_1's multi_logloss: 0.7393\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n","               importance_type='split', learning_rate=0.1, max_depth=-1,\n","               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n","               n_estimators=1000, n_jobs=-1, num_leaves=31, objective=None,\n","               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n","               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)"]},"metadata":{"tags":[]},"execution_count":33},{"output_type":"stream","text":["CV Log Loss Score: 0.739300\n","================================================================================\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":422},"id":"TtDO5m7zZiKz","executionInfo":{"elapsed":2609,"status":"ok","timestamp":1623352760218,"user":{"displayName":"황재원","photoUrl":"","userId":"13697012667758492773"},"user_tz":-540},"outputId":"311ff478-8669-407f-b035-2d5c08cdecf2"},"source":["submit=submission.copy()\n","\n","submit.iloc[:,1:]=0\n","for fold in range(5):\n","    submit.iloc[:,1:] += lgb_models[fold].predict_proba(test)/5\n","\n","submit.to_csv('test_submit_lgbm.csv', index=False)\n","submit"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>26457</td>\n","      <td>0.080112</td>\n","      <td>0.103486</td>\n","      <td>0.816402</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>26458</td>\n","      <td>0.204380</td>\n","      <td>0.218259</td>\n","      <td>0.577361</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26459</td>\n","      <td>0.066103</td>\n","      <td>0.139117</td>\n","      <td>0.794780</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>26460</td>\n","      <td>0.133489</td>\n","      <td>0.114579</td>\n","      <td>0.751932</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>26461</td>\n","      <td>0.081995</td>\n","      <td>0.178031</td>\n","      <td>0.739974</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9995</th>\n","      <td>36452</td>\n","      <td>0.145144</td>\n","      <td>0.200359</td>\n","      <td>0.654497</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>36453</td>\n","      <td>0.127294</td>\n","      <td>0.216303</td>\n","      <td>0.656403</td>\n","    </tr>\n","    <tr>\n","      <th>9997</th>\n","      <td>36454</td>\n","      <td>0.019075</td>\n","      <td>0.085467</td>\n","      <td>0.895458</td>\n","    </tr>\n","    <tr>\n","      <th>9998</th>\n","      <td>36455</td>\n","      <td>0.156889</td>\n","      <td>0.194858</td>\n","      <td>0.648253</td>\n","    </tr>\n","    <tr>\n","      <th>9999</th>\n","      <td>36456</td>\n","      <td>0.119113</td>\n","      <td>0.238711</td>\n","      <td>0.642176</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10000 rows × 4 columns</p>\n","</div>"],"text/plain":["      index         0         1         2\n","0     26457  0.080112  0.103486  0.816402\n","1     26458  0.204380  0.218259  0.577361\n","2     26459  0.066103  0.139117  0.794780\n","3     26460  0.133489  0.114579  0.751932\n","4     26461  0.081995  0.178031  0.739974\n","...     ...       ...       ...       ...\n","9995  36452  0.145144  0.200359  0.654497\n","9996  36453  0.127294  0.216303  0.656403\n","9997  36454  0.019075  0.085467  0.895458\n","9998  36455  0.156889  0.194858  0.648253\n","9999  36456  0.119113  0.238711  0.642176\n","\n","[10000 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":35}]}]}